---
layout: post
title: Чек-лист хороших инженерных практик в компаниях
subtitle:
summary: Подходы к тестированию, развертыванию, разработке и процессам
cover_url: "Путь к файлу-обложке для соц. сетей, например, /images/vscode_eslint.png"
---

Разработка программного обеспечения нетривиальный процесс, который имеет тенденцию значительно усложняться с ростом количества участников. Больше людей в команде - большего числа коммуникаций и необходимости синхронизироваться (обмениваться знаниями о частях системы и происходящих процессах, следить за бизнесом и его требованиями). Растет цена ошибки, система перестает умещаться в голове одного разработчика, изменения в одном месте влияют на изменения в других местах. В этих условиях, разные команды проявляют себя по разному, некоторые продолжают поддерживать высокий темп разработки и регулярно выпускают новые версии, у других происходит сильное замедление, переговоры отнимают больше времени чем разработка, качество падает, выпуск новой версии становится стрессом и приключением. Общая скорость внедрения новых фич в таких командах может различаться во много раз и даже на порядок.

Причин такой катастрофической разницы довольно много. Вот некоторые из них:

* Ошибки топ-менеджмента в бизнесе. Если бизнес делает не то что надо, то не важно насколько эффективно он делает не то что надо, в конце концов бизнес закроется. Эта тема выходит за рамки текущего гайда.
* Ошибки топ-менеджмента в области процессов. Если на этом уровне все плохо, то все остальное вторично. Даже неверная система бонусов может привести к разладу в команде и полной блокировке разработки в конечном счете.
* Человеческий фактор. Личные качества и человеческие пороки могут создать проблемы как и остальным членам команды, так и всему проекту в целом. Главная проблема в том, что эту часть невозможно выправить никакими процессами. Только изменение поведения, либо расставание.
* Плохой процесс разработки. Эта тема касается всех инженеров без исключения. Сюда входит все начиная от взаимодействия и работы с задачами, заканчивая тестированием и проведением ревью кода.

На некоторые проблемы повлиять либо сложно либо невозможно, но другие, особенно относящиеся к инженерным практикам, нужно постоянно улучшать и менять. Программисты должны принимать в этом самое активное участие. Полезные материалы по теме:

* [Книги](https://ru.hexlet.io/pages/recommended-books)
    * Человеческий фактор. Успешные проекты и команды
    * Мифический человеко-месяц, или Как создаются программные системы
    * Идеальный программист. Как стать профессионалом разработки ПО
    * Цель. Процесс непрерывного совершенствования
* [Что такое DevOps?](https://ru.atlassian.com/devops)
* [Экстремальное программирование](https://ru.wikipedia.org/wiki/Экстремальное_программирование)
* [Manifesto for Agile Software Development](http://agilemanifesto.org/iso/ru/manifesto.html)
* [Bus Factor](https://en.wikipedia.org/wiki/Bus_factor)
* [Формирование инженерной культуры](https://www.youtube.com/watch?v=W7GlELjRODw)
* [Как распространять инженерную культуру в своей компании](https://www.youtube.com/watch?v=mOfiWrTW9dA)

И хотя практик довольно много, все они, сводятся к нескольким простым вещам. Дать возможность команде ...

Ниже приводится чек-лист, который позволяет понять, используются ли в команде те инженерные практики, которые считаются наиболее удачными.

_Соответствие этим практикам не означает то что в компании все хорошо. Возможно это культ-карго либо процессы формализованы настолько, что больше мешают чем помогают. С другой стороны из каждого правила есть исключения и всегда найдется проект где что-то не применимо. Ну и наконец, некоторые из указанных подходов могут идти в разрез с чьими-то ценностями._

### Бизнес

**Хорошо**

* Команда вовлечена в бизнес
* Программисты видят пользователей и общаются с ними.

**Плохо**

* Программисты работают толко по готовому ТЗ
* Делают только то что говорят
* Программисты не знают кто пользователи системы которую они пишут

### Взаимодействие

**Хорошо**

* Проектная структура
* В команде проекта есть все необходимая экспертиза для реализации проекта.
* Члены команды хоршо осведомлены о том что делают коллеги.
* Коллеги не называют друг друга коллегами.
* В любой момент можно обратиться за помощью.
* Новые знания быстро распространяются по команде.
* Blameless culture. В случае факапов не ищут виноватого, а пытаются докопаться до причины и исправить процесс

**Плохо**

* Матричная структура
* Страшно просить помощи.
* Каждый разработчик живет в своем мирке и никого туда не пускает.
* Разработчики сидят прижавшись к стенке спиной и отгородившись друг от друга.
* Blamefull culture. Ищут виновных и наказывают.

### Код

**Хорошо**

* CVS. Код находится под контролем версий (как правило гит).
* Общий код. Любой член команды, в любой момент времени, может изменить любую часть системы.
* Единый стиль кода. В команде все придерживаются стандартов кодирования, принятых для данного стека (языка, платформы).

**Плохо**

* Каждый пишет код в том стиле, в котором он привык. Нет общих стандартов либо есть, но свой, совершенно отдельный от общепринятого.

### Среда разработки

**Хорошо**

* Разработка ведется в специальной development (dev) среде, как правило это локальная машина (возможно с использованием Vagrant или Docker).
* У каждого разработчика своя, независящая от других среда разработки.
* Разворачивание среды автоматизировано и происходит "одной кнопкой".
* Среда разработки максимально приближена к условиям продакшена. Если сервис работает на Linux, то и разработка ведется в Linux. Тоже самое касается и других аспектов.

**Плохо**

* Код правится прямо на продакшене (то место где он работает)
* Разворачивание среды и настройка происходит по мануалам, либо методом "попрообовал запустить - прочитал сообщение об ошибке - погуглил - исправил".

### Качество

**Хорошо**

* Кодовая база покрыта тестами.
* Тесты писать легко и приятно.
* Запуск одного теста выполняется за доли секунды.
* Команда ревьювит код друг друга.
* Практикуется парное программирование.
* Репозитории проекта подключены к серверу непрерывной интеграции на котором, после каждого коммита, проверяется стиль кодирования (через запуск линтеров), прогоняются тесты, осуществляется сборка проекта (например компиляция)

**Плохо**

* Нет тестов
* Тесты есть, но приходится заставлять себя писать тесты, потому что их сложно писать, они долго выполняются, часто ломаются или постоянно приходится их переписывать.
* Запуск одного теста занимает секунды.
* Отсутствует код ревью.
* Работа нового кода провреяется только ручным способом, через прокликивание.

### Выкатка новых версий (более актуально для веб-проектов)

**Хорошо**

* Развертывание автоматизировано и выполняется одной кнопкой.
* Развертывание - рядовое событие, которое может выполняться в любой момент по готовности фич без необходимости отвлекать команду.
* Развертывание происходит часто и быстро.

**Плохо**

* Выкладка происходит в ручном режиме, через прямое управление с сервера
* Выкладка кода это событие, сопровождающееся эмоциональным напряжением и вовлечением большого числа участников
* Процесс развертывания длится десятки минут или часы.
* Разворачивание происходит раз в неделю и реже.

### Эксплуатация

---

*Кирилл Мокевнин (и сообщество Хекслета)*
